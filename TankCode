#include <math.h>
#include "Arduino.h"
#include "Enes100.h"
#include "Tank.h"



void setup() {
    Enes100.begin("Project Kowalski", WATER, 249,50, 51);
    Tank.begin();
    
    Enes100.println("Starting directions towards landing zone");
    //rotateOTV();
    // moveTillX(3.2);
    
    // Enes100.println("Starting 90 degree turns");
    
    // Enes100.println("Turn 1");
    // turn90Degrees(2);
    
    // Enes100.println("Turn 2");
    // turn90Degrees(2);
    
    // Enes100.println("Turn 3");
    // turn90Degrees(2);
    
    // Enes100.println("Start Moving Towards Mission Site");
    // turn90Degrees(1);
    //moveTillY(1.8);
    navigateMission();
}

void loop() {
    delay(1000);
    updateCoords();
    moveTillX(3);
    updateDirection();
    //break;
}

void updateCoords()
{

    Enes100.print("X = "); Enes100.println(Enes100.getX());
    Enes100.print("Y = "); Enes100.println(Enes100.getY());
    Enes100.print("Theta = "); Enes100.println(Enes100.getTheta());

}

void updateDirection()
{
    Enes100.print("Distance Reading: "); Enes100.println(Tank.readDistanceSensor(1));
    delay(1000);
}

void distSense()
{
 
    float currentDistance = Tank.readDistanceSensor(1);
    Enes100.println(Tank.readDistanceSensor(1));
    
      currentDistance = Tank.readDistanceSensor(1);        
        
        if (currentDistance < .3) {
            if (Enes100.getY() < 1) {
                turn90Degrees(1);
                moveTillY(1.45);
                turn90Degrees(2);
                delay(100);
                
            } else {
                turn90Degrees(2);
                moveTillY(.55);
                turn90Degrees(1);
                delay(100);
                
            }   
      }   
}


void rotateOTV() {
    // Set a maximum speed for the motors
    const int maxSpeed = 150;
    // Threshold for stopping (.2 radians)
    const float threshold = .2; 
    
    // Continue rotating until theta is within the specified range
    while (fabs(Enes100.getTheta()) > threshold) {
        updateCoords ();
        // Get the current theta
        float currentTheta = Enes100.getTheta();
    
        // Calculate the speed based on how close we are to zero
        int speed = maxSpeed;

        // Adjust the speed based on the angle's proximity to zero
        if (fabs(currentTheta) < threshold + .2) {
            //map(int x, int in_min, int in_max, int out_min, int out_max)
            speed = map(fabs(currentTheta), threshold, 0.5, 50, maxSpeed); 
            // Slow down as it approaches threshold
        }

        // Control the motor direction and speed
        if (currentTheta < 0) {
            // clockwise if theta is negative
            setDirection(2, speed);
        } else {
            // counterclockwise if theta is positive
            setDirection (1, speed);
        }
        //Motors need to stop to check thetha
        delay(100);
    }
    stopMotors();
}

void moveTillX(float xCord){
    //Moves Tank till x values reach target within threshold of .3
    while(fabs(Enes100.getX() - xCord) > 0.3){
        Enes100.println("Reached");
        setDirection(0, 200);
        delay(100);
        stopMotors();
        
        if(Tank.readDistanceSensor(1) > .2 && Tank.readDistanceSensor(1) != -1){
            distSense();
        }
    }
    if(Enes100.getY() < 1.1){
            turn90Degrees(1);
            moveTillY(1.45);
            turn90Degrees(2);
    }
}

void moveTillY(float yCord){
    //Moves Tank till y values reach target within threshold of .3
    Enes100.println("MoveTill");
    float currentY = Enes100.getY();
    while (fabs(currentY - yCord) > 0.1) {
        currentY = Enes100.getY();

        // Calculate the difference
        float distance = yCord - currentY;

        // Calculate speed (you can customize this)
        int maxSpeed = 100;
        int speed = maxSpeed;

        // Optional: Adjust speed based on how close you are to the target
        if (fabs(distance) < 0.2) {
            speed = map(fabs(distance), 0.0, 0.2, 50, maxSpeed);
        }
        setDirection(0, speed);
        // Optional: Add a small delay to allow the motors to react
        delay(10);
    }

    // Stop the motors once the target x coordinate is reached
    stopMotors();
}


void moveOTV(int time, int direction){
    setDirection(direction, 255);
    delay(time);
    stopMotors();
}

void moveObstacle(int time, int direction){
     moveTillX(3.5);
     stopMotors();
}

void stopMotors(){
    //setLeftMotorPWM
    Tank.setLeftMotorPWM(0);
    Tank.setRightMotorPWM(0);
    //setRightMotorPWM
}
// Constants
const float MAX_TURN_SPEED = 255; // Maximum turn speed for motors
const float THRESHOLD = 0.1;       // Angle threshold for stopping
const float SOME_CONSTANT = 1.0;   // Proportional gain for turning

// Constrain function
float constrain(float value, float minValue, float maxValue) {
    if (value < minValue) {
        return minValue;
    } else if (value > maxValue) {
        return maxValue;
    } else {
        return value;
    }
}

float normalizeTheta(float theta) {
    // Normalize theta to the range [-pi, pi]
    while (theta > PI) {
        theta -= 2 * PI;
    }
    while (theta < -PI) {
        theta += 2 * PI;
    }
    return theta;
}

void turn90Degrees(int direction){
    //should pass in 1 (left) or 2 (right)
    float target;
    float currentTheta = Enes100.getTheta();
    
    if(direction == 1){
        //determines 90 degree target theta left turn
       target = normalizeTheta(currentTheta + (PI/2));
    }else if (direction == 2){
        //detemines 90 degree target theta right turn
      target = normalizeTheta(currentTheta - (PI/2));
    } else {
        //Invalid direction, exit the function
        return;
    }
    
    Enes100.println( target);
    
    while (fabs(normalizeTheta(Enes100.getTheta()) - target) > .5) {
        updateCoords ();
        currentTheta = Enes100.getTheta();
    
        // Calculate the speed based on how close we are to zero
        int maxSpeed = 100;
        int speed = maxSpeed;

        // Adjust the speed based on the angle's proximity to zero
        if (fabs (normalizeTheta(currentTheta-target)) <  0.5) {
            //map(int x, int in_min, int in_max, int out_min, int out_max)
            
            speed = map(fabs(currentTheta - target), 0, .5, 20, maxSpeed); 
            // Slow down as it approaches threshold
        }

        // Control the motor direction and speed
        if (normalizeTheta(currentTheta - target) < 0) {
            // clockwise if theta is negative
            setDirection(2, speed);
        } else {
            // counterclockwise if theta is positive
            setDirection (1, speed);
        }

        delay(10);
       
        
    }
     stopMotors();
 
}

void navigateMission(){
    float currentY = Enes100.getY();
    
    if(currentY < 1){ //lower starting position
        rotateOTV(); 
        turn90Degrees(1);
        moveTillY (1.5);
        delay (1000);
        turn90Degrees(2);
        moveTillX(3.5);
    }else{ //upper starting position
        rotateOTV();
        turn90Degrees(2);
        moveTillY(.55);
        delay(1000);
        turn90Degrees(1);
        moveTillX(3.5);
    }
}



void setDirection(int motors, int power) {
    if(power > 255){
        power = 255;
    }else if(power < -255){
        power = -255;
    }
    
    if (motors == 0){
        Tank.setLeftMotorPWM(power);
        Tank.setRightMotorPWM(power);
    }else if (motors == 1){//turn left
        Tank.setLeftMotorPWM(power);
        Tank.setRightMotorPWM(-power);
    }else if (motors == 2){//turn right
        Tank.setLeftMotorPWM(-power);
        Tank.setRightMotorPWM(power);
    }

}
